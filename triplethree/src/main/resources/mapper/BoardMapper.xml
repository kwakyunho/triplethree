<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper  namespace="shop.triplethree.mapper.BoardMapper">
	<resultMap id="boardResultMap" type="shop.triplethree.vo.Board">
		<result column="code" property="code"/>
		<result column="emp_code" property="empCode"/>
		<result column="board_title" property="boardTitle"/>
		<result column="board_con" property="boardCon"/>
		<result column="board_count" property="boardCount"/>
		<result column="board_pw" property="boardPw"/>
		<result column="writer" property="writer"/>
		<result column="li_code" property="liCode"/>
		<result column="writer_day" property="writerDay"/>
	</resultMap>
	<!-- 게시글 카운트 증가  -->
	<update id="updateCnt" parameterType="String">
		update BOARD set board_count = board_count + 1 where code=#{code}
	</update>
	<!--게시글 삭제하기 -->
	<delete id="deleteBoard" parameterType="String">
	 	Delete from BOARD where code=#{code}
	</delete>
	
	<!-- 사원번호(SID)로 사원명 가져오기  -->
	<select id="getNameByEmpCode" parameterType="String" resultType="String">
		SELECT
			emp_name
		FROM EMP_MANAGE
		WHERE code=#{empCode}
	</select>
	
	<!--게시판 카테고리 가져오기 다가져오기 -->
	<select id="selectCate" parameterType="String" resultType="shop.triplethree.vo.Board">
			select
				s_section as liCodeStr
				,code as liCode
			FROM
				LIST_MANAGE
			WHERE l_section='게시판'
	</select>
	
	<!-- 전사게시판 카테고리 가져오기-->
	<select id="selectBCate" parameterType="String" resultType="shop.triplethree.vo.Board">
			select
				s_section as liCodeStr
				,code as liCode
			FROM
				LIST_MANAGE
			WHERE m_section='전사게시판'
	</select> 
	
	<!--부서게시판 카테고리 가져오기 -->
	<select id="selectDBCate" parameterType="String" resultType="shop.triplethree.vo.Board">
			select
				s_section as liCodeStr
				,code as liCode
			FROM
				LIST_MANAGE
			WHERE m_section='부서게시판'
	</select>
	
	<insert id="insertBoard" parameterType="shop.triplethree.vo.Board">
		Insert into BOARD
			(code
			,emp_code
			,board_title
			,board_con
			,board_count
			,board_pw
			,li_code
			,writer_day
			,board_file)
		values
			(#{code}
			,#{empCode}
			,#{boardTitle}
			,#{boardCon}
			,0
			,#{boardPw}
			,#{liCode}
			,NOW()
			,#{boardFilePath});
	</insert>
	
	<!-- 전사게시판 글 다가져오기 -->
	<select id="selectBoardList" resultMap="boardResultMap">
		SELECT
			B.code
			,B.li_code
			,emp_code
			,PO.poname AS poname
         	,EM.emp_name AS writer
         	,board_title
			,board_con
			,board_count 
			,date_format(B.writer_day,'%Y-%m-%d') as writer_day
 		FROM BOARD AS B
		LEFT JOIN EMP_MANAGE AS EM
		ON	B.emp_code = EM.emp_num
		LEFT JOIN POSISYS AS PO
		ON	EM.pocode = PO.code
		WHERE B.li_code = 'LIS-20191219000001' or B.li_code = 'LIS-20191219000002'
	</select>
	
	<!-- 전사공지사항 글 목록 리스트로 뽑아오기 (emp_code 대신 이름으로 보여주기) -->
	<select id="selectNoticeList" resultMap="boardResultMap">
		SELECT
			B.code
			,B.li_code
			,emp_code
			,PO.poname AS poname
         	,EM.emp_name AS writer
         	,board_title
			,board_con
			,board_count 
			,date_format(B.writer_day,'%Y-%m-%d') as writer_day
 		FROM BOARD AS B
		LEFT JOIN EMP_MANAGE AS EM
		ON	B.emp_code = EM.emp_num
		LEFT JOIN POSISYS AS PO
		ON	EM.pocode = PO.code
		WHERE B.li_code = 'LIS-20191219000001'
	</select>
	
	<!-- 전사소식 글 목록 리스트로 뽑아오기 (emp_code 대신 이름으로 보여주기) -->
	<select id="selectNewsList" resultMap="boardResultMap">
		SELECT
			B.code
			,B.li_code
			,emp_code
			,PO.poname AS poname
         	,EM.emp_name AS writer
         	,board_title
			,board_con
			,board_count 
			,date_format(B.writer_day,'%Y-%m-%d') as writer_day
 		FROM BOARD AS B
		LEFT JOIN EMP_MANAGE AS EM
		ON	B.emp_code = EM.emp_num
		LEFT JOIN POSISYS AS PO
		ON	EM.pocode = PO.code
		WHERE B.li_code = 'LIS-20191219000002'
	</select>
	
	<!-- 부서소식 글 목록 리스트로 뽑아오기 (emp_code 대신 이름으로 보여주기) -->
	<select id="departBoardList" resultMap="boardResultMap">
		SELECT
			B.code
			,B.li_code
			,emp_code
			,PO.poname AS poname
         	,EM.emp_name AS writer
         	,board_title
			,board_con
			,board_count 
			,date_format(B.writer_day,'%Y-%m-%d') as writer_day
 		FROM BOARD AS B
		LEFT JOIN EMP_MANAGE AS EM
		ON	B.emp_code = EM.emp_num
		LEFT JOIN POSISYS AS PO
		ON	EM.pocode = PO.code
		WHERE B.li_code = 'LIS-20191219000003' or B.li_code = 'LIS-20191219000004' or B.li_code = 'LIS-20191219000005' or B.li_code = 'LIS-20191219000006'
	</select>
	
	<!--글 정보 하나만 뽑아오기 code로   -->
	<select id="getBoardByCode" parameterType="String" resultType="shop.triplethree.vo.Board">
		SELECT
			B.code as code
			,emp_code as empCode
			,B.li_code as liCode
			,LM.m_section as liCodeMStr
			,LM.s_section as liCodeStr
			,PO.poname AS poname
         	,EM.emp_name AS writer
         	,board_pw AS boardPw
         	,board_title AS boardTitle
			,board_con AS boardCon
			,board_count AS boardCount
			,date_format(B.writer_day,'%Y-%m-%d') as writerDay
 		FROM BOARD AS B
		LEFT JOIN EMP_MANAGE AS EM
		ON	B.emp_code = EM.emp_num
		LEFT JOIN POSISYS AS PO
		ON	EM.pocode = PO.code
		LEFT JOIN LIST_MANAGE AS LM
		ON	B.li_code = LM.code
		where B.code=#{code}
	</select>
	
	<select id="getBoardForUpdate" parameterType="String" resultType="shop.triplethree.vo.Board">
		SELECT
			B.code as code
			,emp_code as empCode
			,B.li_code as liCode
			,LM.m_section as liCodeMStr
			,LM.s_section as liCodeStr
			,PO.poname AS poname
         	,EM.emp_name AS writer
         	,board_pw AS boardPw
         	,board_title AS boardTitle
			,board_con AS boardCon
			,board_count AS boardCount
			,date_format(B.writer_day,'%Y-%m-%d') as writerDay
 		FROM BOARD AS B
		LEFT JOIN EMP_MANAGE AS EM
		ON	B.emp_code = EM.emp_num
		LEFT JOIN POSISYS AS PO
		ON	EM.pocode = PO.code
		LEFT JOIN LIST_MANAGE AS LM
		ON	B.li_code = LM.code
		where B.code=#{code}
	</select>
	
	<!-- <select id="getBoardForUpdate" parameterType="String" resultType="shop.triplethree.vo.Board">
		SELECT
			B.code as code
         	,board_pw AS boardPw
         	,board_title AS boardTitle
			,board_con AS boardCon
			,board_count AS boardCount
			,date_format(B.writer_day,'%Y-%m-%d') as writerDay
 		FROM BOARD AS B
		where B.code=#{code}
	</select> -->
	
	<!-- count 나중에 넣어주기 -->
	<update id="updateBoard" parameterType="shop.triplethree.vo.Board" >
		update BOARD
			set
			code = #{code}
			,emp_code = #{empCode}
			,board_title = #{boardTitle}
			,board_con = #{boardCon}
			,writer_day = #{writerDay}
			,board_pw = #{boardPw}
		where
			code = #{code}
	</update>
	
	<!-- 부서게시판 업데이트 처리  -->
	<update id="updateDepartBoard" parameterType="shop.triplethree.vo.Board" >
		update BOARD
			set
			code = #{code}
			,emp_code = #{empCode}
			,board_title = #{boardTitle}
			,board_con = #{boardCon}
			,writer_day = #{writerDay}
			,board_pw = #{boardPw}
		where
			code = #{code}
	</update>
	



</mapper>